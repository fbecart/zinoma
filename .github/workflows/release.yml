# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by create-release). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ag/release
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RG_VERSION: TEST-0.0.0
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.RG_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "::set-env name=RG_VERSION::${GITHUB_REF#refs/tags/}"
          echo "version is: ${{ env.RG_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RG_VERSION }}
          release_name: ${{ env.RG_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.RG_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-archive:
    name: build-archive
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, macos]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $RELEASE_UPLOAD_URL"
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $RELEASE_VERSION"

      - name: Build release binary
        run: cargo build --verbose --release

      - name: Strip release binary
        run: strip "target/release/zinoma"

      - name: Build archive
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir.sh ./target)"
          staging="zinoma-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}

          cp {README.md,LICENSE} "$staging/"
          cp CHANGELOG.md "$staging/doc/"
          cp "$outdir"/{zinoma.bash,_zinoma,zinoma.fish,_zinoma.ps1} "$staging/complete/"

          cp "target/release/zinoma" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "::set-env name=ASSET::$staging.tar.gz"

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  build-deb:
    name: build-deb
    needs: create-release
    runs-on: ubuntu-latest
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [amd64, i386]
        include:
          - build: amd64
            target: x86_64-unknown-linux-gnu
          - build: i386
            target: i686-unknown-linux-gnu

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Get release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $RELEASE_UPLOAD_URL"
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $RELEASE_VERSION"

      - name: Delete artifact
        run: rm -r artifacts

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install cargo-deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.target }}
          use-cross: true

      - name: Copy assets
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir.sh ./target/${{ matrix.target }})"
          deploydir=deployment/deb
          mkdir -p "$deploydir"
          cp "$outdir"/{zinoma.bash,_zinoma,zinoma.fish} "$deploydir/"

      - name: Build deb
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build --target=${{ matrix.target }}

      - name: Obtain asset path and name
        shell: bash
        run: |
          asset_path="$(ls target/${{ matrix.target }}/debian/*.deb)"
          echo "::set-env name=ASSET_PATH::$asset_path"
          echo "asset path: $asset_path"
          asset_name="$(basename $asset_path)"
          echo "::set-env name=ASSET_NAME::$asset_name"
          echo "asset name: $asset_name"

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  publish-release:
    name: publish-release
    needs: [build-archive, build-deb]
    runs-on: ubuntu-latest
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Get release version
        shell: bash
        run: |
          release_version="$(cat artifacts/release-version)"
          echo "::set-env name=RELEASE_VERSION::$release_version"
          echo "release version: $RELEASE_VERSION"

      - name: Delete artifact
        run: rm -r artifacts

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish

      - name: Trigger publication to Homebrew
        uses: peter-evans/repository-dispatch@v1
        with:
          repository: fbecart/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_REPO_ACCESS_TOKEN }}
          event-type: zinoma-release
          client-payload: '{"version": "${{ env.RELEASE_VERSION }}"}'
